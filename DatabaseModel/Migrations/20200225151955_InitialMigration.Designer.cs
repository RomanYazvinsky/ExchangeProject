// <auto-generated />
using System;
using Exchange.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Exchange.Data.Migrations
{
    [DbContext(typeof(ExchangeDbContext))]
    [Migration("20200225151955_InitialMigration")]
    partial class InitialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Exchange.Data.Entities.AddressEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CountryCode")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("PostIndex")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("Exchange.Data.Entities.Currency.BillModifierEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("char(36)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(65,30)");

                    b.HasKey("Id");

                    b.ToTable("BillModifierEntity");

                    b.HasDiscriminator<string>("Discriminator").HasValue("BillModifierEntity");
                });

            modelBuilder.Entity("Exchange.Data.Entities.Currency.CurrencyEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CountryCode")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CurrencySign")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("Currencies");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3726f16b-1aef-443a-9762-24bdd62cd530"),
                            Abbreviation = "USD",
                            CountryCode = "840",
                            CurrencySign = "$",
                            Name = "United States Dollar"
                        });
                });

            modelBuilder.Entity("Exchange.Data.Entities.JoinEntities.OrderToBillModifier", b =>
                {
                    b.Property<Guid>("OrderId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("BillModifierId")
                        .HasColumnType("char(36)");

                    b.HasKey("OrderId", "BillModifierId");

                    b.HasIndex("BillModifierId");

                    b.ToTable("OrderToBillModifier");
                });

            modelBuilder.Entity("Exchange.Data.Entities.JoinEntities.ProductProductClassEntity", b =>
                {
                    b.Property<Guid>("ProductId")
                        .HasColumnType("char(36)");

                    b.Property<string>("ProductClassId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("ProductId", "ProductClassId");

                    b.HasIndex("ProductClassId");

                    b.ToTable("ProductProductClassEntity");
                });

            modelBuilder.Entity("Exchange.Data.Entities.MeasureUnitConversionEntity", b =>
                {
                    b.Property<Guid>("FromId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ToId")
                        .HasColumnType("char(36)");

                    b.Property<decimal>("Coefficient")
                        .HasColumnType("decimal(65,30)");

                    b.HasKey("FromId", "ToId");

                    b.HasIndex("ToId");

                    b.ToTable("MeasureUnitConversions");
                });

            modelBuilder.Entity("Exchange.Data.Entities.MeasureUnitEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("MeasureUnits");
                });

            modelBuilder.Entity("Exchange.Data.Entities.Order.OrderEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("AddressId")
                        .HasColumnType("char(36)");

                    b.Property<decimal>("Bill")
                        .HasColumnType("decimal(65,30)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("char(36)");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AddressId")
                        .IsUnique();

                    b.HasIndex("CustomerId");

                    b.HasIndex("ProductId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Exchange.Data.Entities.Order.OrderTransactionEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("CurrencyId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("char(36)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("TransactionEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("TransactionStart")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(65,30)");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderTransactions");
                });

            modelBuilder.Entity("Exchange.Data.Entities.ProductClassAttributeEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("AssociatedClassId")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<bool>("Mandatory")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<int>("ValueDataType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.HasIndex("AssociatedClassId");

                    b.HasIndex("Name", "AssociatedClassId")
                        .IsUnique();

                    b.ToTable("ProductClassAttributes");
                });

            modelBuilder.Entity("Exchange.Data.Entities.ProductClassAttributeValueEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ProductClassAttributeId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("ProductClassAttributeId");

                    b.HasIndex("ProductId", "ProductClassAttributeId")
                        .IsUnique();

                    b.ToTable("ProductClassAttributeValues");
                });

            modelBuilder.Entity("Exchange.Data.Entities.ProductClassEntity", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("Name");

                    b.ToTable("ProductClasses");
                });

            modelBuilder.Entity("Exchange.Data.Entities.ProductEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("DiscountId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<Guid?>("SellerId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("SellerId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Exchange.Data.Entities.Seller.SellerEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("AddressId")
                        .HasColumnType("char(36)");

                    b.Property<string>("SellerName")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("AddressId")
                        .IsUnique();

                    b.ToTable("Sellers");
                });

            modelBuilder.Entity("Exchange.Data.Entities.User.UserEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Email")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<bool>("IsEmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<Guid?>("SellerId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("SellerId");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0041bdea-26ea-42b1-9702-2737636886a8"),
                            Email = "admin@site-exchange.com",
                            IsEmailConfirmed = true,
                            PasswordHash = "a6Cc8rPnIK79vPOT1/1O5AW3kpA7iuLfVevKZwX7YJv6nqFTMnAxB9/DXwm0hkh0do//ipyqTOt8QJEsJn10Ebq1dE+Fj+k0GW4cloYC+/bhRAJw3EcDnTKCxCk3DRSbLXRE4l71HWJu9eZHBCSV/3wwGVaheSndTdJfjxO6gJ0=.74by0ZfpL7E5bENbz6J46g==",
                            Role = "Administrator",
                            Username = "admin"
                        });
                });

            modelBuilder.Entity("Exchange.Data.Entities.ValueChangeRequestEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("PreviousValue")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<Guid>("ProductClassAttributeValueId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("ResolutionTime")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("SenderId")
                        .HasColumnType("char(36)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("ProductClassAttributeValueId");

                    b.HasIndex("SenderId");

                    b.ToTable("ValueChangeRequests");
                });

            modelBuilder.Entity("Exchange.Data.Entities.Currency.SellerBillModifierEntity", b =>
                {
                    b.HasBaseType("Exchange.Data.Entities.Currency.BillModifierEntity");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("char(36)");

                    b.HasIndex("OwnerId");

                    b.HasIndex("ProductId")
                        .IsUnique();

                    b.HasDiscriminator().HasValue("SellerBillModifierEntity");
                });

            modelBuilder.Entity("Exchange.Data.Entities.Currency.UserBillModifierEntity", b =>
                {
                    b.HasBaseType("Exchange.Data.Entities.Currency.BillModifierEntity");

                    b.HasIndex("OwnerId")
                        .HasName("IX_BillModifierEntity_OwnerId1");

                    b.HasDiscriminator().HasValue("UserBillModifierEntity");
                });

            modelBuilder.Entity("Exchange.Data.Entities.JoinEntities.OrderToBillModifier", b =>
                {
                    b.HasOne("Exchange.Data.Entities.Currency.BillModifierEntity", "BillModifier")
                        .WithMany()
                        .HasForeignKey("BillModifierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Exchange.Data.Entities.Order.OrderEntity", "Order")
                        .WithMany("Modifiers")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Exchange.Data.Entities.JoinEntities.ProductProductClassEntity", b =>
                {
                    b.HasOne("Exchange.Data.Entities.ProductClassEntity", "ProductClass")
                        .WithMany("ProductProductClasses")
                        .HasForeignKey("ProductClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Exchange.Data.Entities.ProductEntity", "Product")
                        .WithMany("ProductProductClasses")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Exchange.Data.Entities.MeasureUnitConversionEntity", b =>
                {
                    b.HasOne("Exchange.Data.Entities.MeasureUnitEntity", "From")
                        .WithMany("Conversions")
                        .HasForeignKey("FromId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Exchange.Data.Entities.MeasureUnitEntity", "To")
                        .WithMany()
                        .HasForeignKey("ToId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Exchange.Data.Entities.Order.OrderEntity", b =>
                {
                    b.HasOne("Exchange.Data.Entities.AddressEntity", "Address")
                        .WithOne()
                        .HasForeignKey("Exchange.Data.Entities.Order.OrderEntity", "AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Exchange.Data.Entities.User.UserEntity", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Exchange.Data.Entities.ProductEntity", "Product")
                        .WithMany("Orders")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Exchange.Data.Entities.Order.OrderTransactionEntity", b =>
                {
                    b.HasOne("Exchange.Data.Entities.Currency.CurrencyEntity", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Exchange.Data.Entities.Order.OrderEntity", "Order")
                        .WithMany("Transactions")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Exchange.Data.Entities.ProductClassAttributeEntity", b =>
                {
                    b.HasOne("Exchange.Data.Entities.ProductClassEntity", "AssociatedClass")
                        .WithMany("ProductClassAttributes")
                        .HasForeignKey("AssociatedClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Exchange.Data.Entities.ProductClassAttributeValueEntity", b =>
                {
                    b.HasOne("Exchange.Data.Entities.ProductClassAttributeEntity", "ProductClassAttribute")
                        .WithMany("AttributeValues")
                        .HasForeignKey("ProductClassAttributeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Exchange.Data.Entities.ProductEntity", "Product")
                        .WithMany("ProductClassAttributeValues")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Exchange.Data.Entities.ProductEntity", b =>
                {
                    b.HasOne("Exchange.Data.Entities.Seller.SellerEntity", "Seller")
                        .WithMany("Products")
                        .HasForeignKey("SellerId");
                });

            modelBuilder.Entity("Exchange.Data.Entities.Seller.SellerEntity", b =>
                {
                    b.HasOne("Exchange.Data.Entities.AddressEntity", "Address")
                        .WithOne()
                        .HasForeignKey("Exchange.Data.Entities.Seller.SellerEntity", "AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Exchange.Data.Entities.User.UserEntity", b =>
                {
                    b.HasOne("Exchange.Data.Entities.Seller.SellerEntity", "Seller")
                        .WithMany("Users")
                        .HasForeignKey("SellerId");
                });

            modelBuilder.Entity("Exchange.Data.Entities.ValueChangeRequestEntity", b =>
                {
                    b.HasOne("Exchange.Data.Entities.ProductClassAttributeValueEntity", "AttributeValue")
                        .WithMany("ChangeRequests")
                        .HasForeignKey("ProductClassAttributeValueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Exchange.Data.Entities.Seller.SellerEntity", "Sender")
                        .WithMany("ChangeRequests")
                        .HasForeignKey("SenderId");
                });

            modelBuilder.Entity("Exchange.Data.Entities.Currency.SellerBillModifierEntity", b =>
                {
                    b.HasOne("Exchange.Data.Entities.Seller.SellerEntity", "Seller")
                        .WithMany("Discounts")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Exchange.Data.Entities.ProductEntity", "Product")
                        .WithOne("Discount")
                        .HasForeignKey("Exchange.Data.Entities.Currency.SellerBillModifierEntity", "ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Exchange.Data.Entities.Currency.UserBillModifierEntity", b =>
                {
                    b.HasOne("Exchange.Data.Entities.User.UserEntity", "User")
                        .WithMany("Discounts")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
