// <auto-generated />
using System;
using Exchange;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DatabaseModel.Migrations
{
    [DbContext(typeof(ExchangeDbContext))]
    [Migration("20200129162457_IntialMigration")]
    partial class IntialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Exchange.Entities.JoinEntities.ProductProductClass", b =>
                {
                    b.Property<Guid>("ProductId")
                        .HasColumnType("char(36)");

                    b.Property<string>("ProductClassId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("ProductId", "ProductClassId");

                    b.HasIndex("ProductClassId");

                    b.ToTable("ProductProductClass");
                });

            modelBuilder.Entity("Exchange.Entities.MeasureUnit", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Guid");

                    b.ToTable("MeasureUnits");
                });

            modelBuilder.Entity("Exchange.Entities.MeasureUnitConversion", b =>
                {
                    b.Property<Guid>("FromId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ToId")
                        .HasColumnType("char(36)");

                    b.Property<decimal>("Coefficient")
                        .HasColumnType("decimal(65,30)");

                    b.HasKey("FromId", "ToId");

                    b.HasIndex("ToId");

                    b.ToTable("MeasureUnitConversions");
                });

            modelBuilder.Entity("Exchange.Entities.Product", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Guid");

                    b.HasIndex("UserId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Exchange.Entities.ProductClass", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("Name");

                    b.ToTable("ProductClasses");
                });

            modelBuilder.Entity("Exchange.Entities.ProductClassAttribute", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("AssociatedClassId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<bool>("Mandatory")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<int>("ValueDataType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("Guid");

                    b.HasIndex("AssociatedClassId");

                    b.HasIndex("Name", "AssociatedClassId")
                        .IsUnique();

                    b.ToTable("ProductClassAttributes");
                });

            modelBuilder.Entity("Exchange.Entities.ProductClassAttributeValue", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ProductClassAttributeId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Guid");

                    b.HasIndex("ProductClassAttributeId");

                    b.HasIndex("ProductId", "ProductClassAttributeId")
                        .IsUnique();

                    b.ToTable("ProductClassAttributeValues");
                });

            modelBuilder.Entity("Exchange.Entities.User", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Email")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("UserName")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("Guid");

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Guid = new Guid("5abded61-4445-44f6-835b-f40f64ac417f"),
                            PasswordHash = "22ZYYZAcuxsrN3ODp6OcswRV1Tp0YgV7dFqnh/eMG6uLC6ZI+IlsrzxBdlxTaZydZxOuNmOfgMQUcCikMev6aPxpDsV7uK9OIb/Jes8vcj9Ot1Ep0WID9/GApy/4Fbq/vI3pKRMiFw1YdEJ7/AwcHqwV0Lcg5Ga1THtvcCbpmxk=.7GYs99cuf/6jo5AQ50/HGg==",
                            Role = "Administrator",
                            UserName = "admin"
                        });
                });

            modelBuilder.Entity("Exchange.Entities.UserDeviceLogin", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("DeviceInfo")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("ValidUntil")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Guid");

                    b.HasIndex("UserId");

                    b.ToTable("UserDeviceLogins");
                });

            modelBuilder.Entity("Exchange.Entities.ValueChangeRequest", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("PreviousValue")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<Guid>("ProductClassAttributeValueId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("ResolutionTime")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("SenderId")
                        .HasColumnType("char(36)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Guid");

                    b.HasIndex("ProductClassAttributeValueId");

                    b.HasIndex("SenderId");

                    b.ToTable("ValueChangeRequests");
                });

            modelBuilder.Entity("Exchange.Entities.JoinEntities.ProductProductClass", b =>
                {
                    b.HasOne("Exchange.Entities.ProductClass", "ProductClass")
                        .WithMany("ProductProductClasses")
                        .HasForeignKey("ProductClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Exchange.Entities.Product", "Product")
                        .WithMany("ProductProductClasses")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Exchange.Entities.MeasureUnitConversion", b =>
                {
                    b.HasOne("Exchange.Entities.MeasureUnit", "From")
                        .WithMany("Conversions")
                        .HasForeignKey("FromId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Exchange.Entities.MeasureUnit", "To")
                        .WithMany()
                        .HasForeignKey("ToId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Exchange.Entities.Product", b =>
                {
                    b.HasOne("Exchange.Entities.User", "Owner")
                        .WithMany("Products")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Exchange.Entities.ProductClassAttribute", b =>
                {
                    b.HasOne("Exchange.Entities.ProductClass", "AssociatedClass")
                        .WithMany("ProductClassAttributes")
                        .HasForeignKey("AssociatedClassId");
                });

            modelBuilder.Entity("Exchange.Entities.ProductClassAttributeValue", b =>
                {
                    b.HasOne("Exchange.Entities.ProductClassAttribute", "ProductClassAttribute")
                        .WithMany("AttributeValues")
                        .HasForeignKey("ProductClassAttributeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Exchange.Entities.Product", "Product")
                        .WithMany("ProductClassAttributeValues")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Exchange.Entities.UserDeviceLogin", b =>
                {
                    b.HasOne("Exchange.Entities.User", "User")
                        .WithMany("UserDeviceLogins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Exchange.Entities.ValueChangeRequest", b =>
                {
                    b.HasOne("Exchange.Entities.ProductClassAttributeValue", "AttributeValue")
                        .WithMany("ChangeRequests")
                        .HasForeignKey("ProductClassAttributeValueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Exchange.Entities.User", "Sender")
                        .WithMany("ChangeRequests")
                        .HasForeignKey("SenderId");
                });
#pragma warning restore 612, 618
        }
    }
}
